// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ocu.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ocu.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ocu {

namespace {

const ::google::protobuf::Descriptor* Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Status_reflection_ = NULL;
const ::google::protobuf::Descriptor* Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ocu_2eproto() {
  protobuf_AddDesc_ocu_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ocu.proto");
  GOOGLE_CHECK(file != NULL);
  Status_descriptor_ = file->message_type(0);
  static const int Status_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, fsm_actuator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, fsm_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, base_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, actuator_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, rse_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, ccc_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, pp_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, gps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, mag_front_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, mag_rear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, monitor_status_),
  };
  Status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Status_descriptor_,
      Status::default_instance_,
      Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Status));
  Command_descriptor_ = file->message_type(1);
  static const int Command_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, pp_map_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, pp_goal_lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, pp_goal_lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, pp_goal_alt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, joy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, ccc_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, select_joy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, select_ccc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, select_pp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, map_),
  };
  Command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Command_descriptor_,
      Command::default_instance_,
      Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Command));
  Point_descriptor_ = file->message_type(2);
  static const int Point_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, z_),
  };
  Point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point));
  Map_descriptor_ = file->message_type(3);
  static const int Map_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, point_),
  };
  Map_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_descriptor_,
      Map::default_instance_,
      Map_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ocu_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Status_descriptor_, &Status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Command_descriptor_, &Command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_descriptor_, &Map::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ocu_2eproto() {
  delete Status::default_instance_;
  delete Status_reflection_;
  delete Command::default_instance_;
  delete Command_reflection_;
  delete Point::default_instance_;
  delete Point_reflection_;
  delete Map::default_instance_;
  delete Map_reflection_;
}

void protobuf_AddDesc_ocu_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tocu.proto\022\003ocu\"\362\001\n\006Status\022\013\n\003seq\030\025 \002(\004"
    "\022\024\n\014fsm_actuator\030\026 \001(\t\022\022\n\nfsm_status\030\027 \001"
    "(\t\022\023\n\013base_status\030\030 \001(\t\022\027\n\017actuator_stat"
    "us\030\031 \001(\t\022\022\n\nrse_status\030\032 \001(\t\022\022\n\nccc_stat"
    "us\030\036 \001(\t\022\021\n\tpp_status\030\037 \001(\t\022\013\n\003gps\030\033 \001(\t"
    "\022\021\n\tmag_front\030\034 \001(\001\022\020\n\010mag_rear\030\035 \001(\001\022\026\n"
    "\016monitor_status\030  \001(\t\"\334\001\n\007Command\022\013\n\003seq"
    "\030\001 \002(\004\022\023\n\013pp_map_file\030\002 \001(\t\022\023\n\013pp_goal_l"
    "at\030\003 \001(\001\022\023\n\013pp_goal_lon\030\004 \001(\001\022\023\n\013pp_goal"
    "_alt\030\005 \001(\001\022\013\n\003joy\030\006 \001(\t\022\021\n\tccc_speed\030\007 \001"
    "(\001\022\022\n\nselect_joy\030\010 \001(\010\022\022\n\nselect_ccc\030\t \001"
    "(\010\022\021\n\tselect_pp\030\n \001(\010\022\025\n\003map\030\025 \001(\0132\010.ocu"
    ".Map\"(\n\005Point\022\t\n\001x\030\021 \002(\001\022\t\n\001y\030\022 \002(\001\022\t\n\001z"
    "\030\023 \002(\001\" \n\003Map\022\031\n\005point\030\024 \003(\0132\n.ocu.Point", 560);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ocu.proto", &protobuf_RegisterTypes);
  Status::default_instance_ = new Status();
  Command::default_instance_ = new Command();
  Point::default_instance_ = new Point();
  Map::default_instance_ = new Map();
  Status::default_instance_->InitAsDefaultInstance();
  Command::default_instance_->InitAsDefaultInstance();
  Point::default_instance_->InitAsDefaultInstance();
  Map::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ocu_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ocu_2eproto {
  StaticDescriptorInitializer_ocu_2eproto() {
    protobuf_AddDesc_ocu_2eproto();
  }
} static_descriptor_initializer_ocu_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Status::kSeqFieldNumber;
const int Status::kFsmActuatorFieldNumber;
const int Status::kFsmStatusFieldNumber;
const int Status::kBaseStatusFieldNumber;
const int Status::kActuatorStatusFieldNumber;
const int Status::kRseStatusFieldNumber;
const int Status::kCccStatusFieldNumber;
const int Status::kPpStatusFieldNumber;
const int Status::kGpsFieldNumber;
const int Status::kMagFrontFieldNumber;
const int Status::kMagRearFieldNumber;
const int Status::kMonitorStatusFieldNumber;
#endif  // !_MSC_VER

Status::Status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Status::InitAsDefaultInstance() {
}

Status::Status(const Status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Status::SharedCtor() {
  _cached_size_ = 0;
  seq_ = GOOGLE_ULONGLONG(0);
  fsm_actuator_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fsm_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  base_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  actuator_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rse_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ccc_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pp_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gps_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mag_front_ = 0;
  mag_rear_ = 0;
  monitor_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Status::~Status() {
  SharedDtor();
}

void Status::SharedDtor() {
  if (fsm_actuator_ != &::google::protobuf::internal::kEmptyString) {
    delete fsm_actuator_;
  }
  if (fsm_status_ != &::google::protobuf::internal::kEmptyString) {
    delete fsm_status_;
  }
  if (base_status_ != &::google::protobuf::internal::kEmptyString) {
    delete base_status_;
  }
  if (actuator_status_ != &::google::protobuf::internal::kEmptyString) {
    delete actuator_status_;
  }
  if (rse_status_ != &::google::protobuf::internal::kEmptyString) {
    delete rse_status_;
  }
  if (ccc_status_ != &::google::protobuf::internal::kEmptyString) {
    delete ccc_status_;
  }
  if (pp_status_ != &::google::protobuf::internal::kEmptyString) {
    delete pp_status_;
  }
  if (gps_ != &::google::protobuf::internal::kEmptyString) {
    delete gps_;
  }
  if (monitor_status_ != &::google::protobuf::internal::kEmptyString) {
    delete monitor_status_;
  }
  if (this != default_instance_) {
  }
}

void Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}

const Status& Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ocu_2eproto();
  return *default_instance_;
}

Status* Status::default_instance_ = NULL;

Status* Status::New() const {
  return new Status;
}

void Status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seq_ = GOOGLE_ULONGLONG(0);
    if (has_fsm_actuator()) {
      if (fsm_actuator_ != &::google::protobuf::internal::kEmptyString) {
        fsm_actuator_->clear();
      }
    }
    if (has_fsm_status()) {
      if (fsm_status_ != &::google::protobuf::internal::kEmptyString) {
        fsm_status_->clear();
      }
    }
    if (has_base_status()) {
      if (base_status_ != &::google::protobuf::internal::kEmptyString) {
        base_status_->clear();
      }
    }
    if (has_actuator_status()) {
      if (actuator_status_ != &::google::protobuf::internal::kEmptyString) {
        actuator_status_->clear();
      }
    }
    if (has_rse_status()) {
      if (rse_status_ != &::google::protobuf::internal::kEmptyString) {
        rse_status_->clear();
      }
    }
    if (has_ccc_status()) {
      if (ccc_status_ != &::google::protobuf::internal::kEmptyString) {
        ccc_status_->clear();
      }
    }
    if (has_pp_status()) {
      if (pp_status_ != &::google::protobuf::internal::kEmptyString) {
        pp_status_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_gps()) {
      if (gps_ != &::google::protobuf::internal::kEmptyString) {
        gps_->clear();
      }
    }
    mag_front_ = 0;
    mag_rear_ = 0;
    if (has_monitor_status()) {
      if (monitor_status_ != &::google::protobuf::internal::kEmptyString) {
        monitor_status_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 seq = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_fsm_actuator;
        break;
      }

      // optional string fsm_actuator = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fsm_actuator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fsm_actuator()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fsm_actuator().data(), this->fsm_actuator().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_fsm_status;
        break;
      }

      // optional string fsm_status = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fsm_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fsm_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fsm_status().data(), this->fsm_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_base_status;
        break;
      }

      // optional string base_status = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_base_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->base_status().data(), this->base_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_actuator_status;
        break;
      }

      // optional string actuator_status = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actuator_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_actuator_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->actuator_status().data(), this->actuator_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_rse_status;
        break;
      }

      // optional string rse_status = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rse_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rse_status().data(), this->rse_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_gps;
        break;
      }

      // optional string gps = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gps()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gps().data(), this->gps().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(225)) goto parse_mag_front;
        break;
      }

      // optional double mag_front = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mag_front:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mag_front_)));
          set_has_mag_front();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_mag_rear;
        break;
      }

      // optional double mag_rear = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mag_rear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mag_rear_)));
          set_has_mag_rear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_ccc_status;
        break;
      }

      // optional string ccc_status = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ccc_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ccc_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ccc_status().data(), this->ccc_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_pp_status;
        break;
      }

      // optional string pp_status = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pp_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pp_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pp_status().data(), this->pp_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_monitor_status;
        break;
      }

      // optional string monitor_status = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monitor_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monitor_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->monitor_status().data(), this->monitor_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 seq = 21;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->seq(), output);
  }

  // optional string fsm_actuator = 22;
  if (has_fsm_actuator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fsm_actuator().data(), this->fsm_actuator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->fsm_actuator(), output);
  }

  // optional string fsm_status = 23;
  if (has_fsm_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fsm_status().data(), this->fsm_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->fsm_status(), output);
  }

  // optional string base_status = 24;
  if (has_base_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->base_status().data(), this->base_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->base_status(), output);
  }

  // optional string actuator_status = 25;
  if (has_actuator_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->actuator_status().data(), this->actuator_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->actuator_status(), output);
  }

  // optional string rse_status = 26;
  if (has_rse_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rse_status().data(), this->rse_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->rse_status(), output);
  }

  // optional string gps = 27;
  if (has_gps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gps().data(), this->gps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->gps(), output);
  }

  // optional double mag_front = 28;
  if (has_mag_front()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->mag_front(), output);
  }

  // optional double mag_rear = 29;
  if (has_mag_rear()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->mag_rear(), output);
  }

  // optional string ccc_status = 30;
  if (has_ccc_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ccc_status().data(), this->ccc_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->ccc_status(), output);
  }

  // optional string pp_status = 31;
  if (has_pp_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pp_status().data(), this->pp_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->pp_status(), output);
  }

  // optional string monitor_status = 32;
  if (has_monitor_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->monitor_status().data(), this->monitor_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->monitor_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 seq = 21;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->seq(), target);
  }

  // optional string fsm_actuator = 22;
  if (has_fsm_actuator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fsm_actuator().data(), this->fsm_actuator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->fsm_actuator(), target);
  }

  // optional string fsm_status = 23;
  if (has_fsm_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fsm_status().data(), this->fsm_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->fsm_status(), target);
  }

  // optional string base_status = 24;
  if (has_base_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->base_status().data(), this->base_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->base_status(), target);
  }

  // optional string actuator_status = 25;
  if (has_actuator_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->actuator_status().data(), this->actuator_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->actuator_status(), target);
  }

  // optional string rse_status = 26;
  if (has_rse_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rse_status().data(), this->rse_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->rse_status(), target);
  }

  // optional string gps = 27;
  if (has_gps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gps().data(), this->gps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->gps(), target);
  }

  // optional double mag_front = 28;
  if (has_mag_front()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->mag_front(), target);
  }

  // optional double mag_rear = 29;
  if (has_mag_rear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->mag_rear(), target);
  }

  // optional string ccc_status = 30;
  if (has_ccc_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ccc_status().data(), this->ccc_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->ccc_status(), target);
  }

  // optional string pp_status = 31;
  if (has_pp_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pp_status().data(), this->pp_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->pp_status(), target);
  }

  // optional string monitor_status = 32;
  if (has_monitor_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->monitor_status().data(), this->monitor_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->monitor_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 seq = 21;
    if (has_seq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->seq());
    }

    // optional string fsm_actuator = 22;
    if (has_fsm_actuator()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fsm_actuator());
    }

    // optional string fsm_status = 23;
    if (has_fsm_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fsm_status());
    }

    // optional string base_status = 24;
    if (has_base_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->base_status());
    }

    // optional string actuator_status = 25;
    if (has_actuator_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->actuator_status());
    }

    // optional string rse_status = 26;
    if (has_rse_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rse_status());
    }

    // optional string ccc_status = 30;
    if (has_ccc_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ccc_status());
    }

    // optional string pp_status = 31;
    if (has_pp_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pp_status());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string gps = 27;
    if (has_gps()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gps());
    }

    // optional double mag_front = 28;
    if (has_mag_front()) {
      total_size += 2 + 8;
    }

    // optional double mag_rear = 29;
    if (has_mag_rear()) {
      total_size += 2 + 8;
    }

    // optional string monitor_status = 32;
    if (has_monitor_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->monitor_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_fsm_actuator()) {
      set_fsm_actuator(from.fsm_actuator());
    }
    if (from.has_fsm_status()) {
      set_fsm_status(from.fsm_status());
    }
    if (from.has_base_status()) {
      set_base_status(from.base_status());
    }
    if (from.has_actuator_status()) {
      set_actuator_status(from.actuator_status());
    }
    if (from.has_rse_status()) {
      set_rse_status(from.rse_status());
    }
    if (from.has_ccc_status()) {
      set_ccc_status(from.ccc_status());
    }
    if (from.has_pp_status()) {
      set_pp_status(from.pp_status());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gps()) {
      set_gps(from.gps());
    }
    if (from.has_mag_front()) {
      set_mag_front(from.mag_front());
    }
    if (from.has_mag_rear()) {
      set_mag_rear(from.mag_rear());
    }
    if (from.has_monitor_status()) {
      set_monitor_status(from.monitor_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Status::Swap(Status* other) {
  if (other != this) {
    std::swap(seq_, other->seq_);
    std::swap(fsm_actuator_, other->fsm_actuator_);
    std::swap(fsm_status_, other->fsm_status_);
    std::swap(base_status_, other->base_status_);
    std::swap(actuator_status_, other->actuator_status_);
    std::swap(rse_status_, other->rse_status_);
    std::swap(ccc_status_, other->ccc_status_);
    std::swap(pp_status_, other->pp_status_);
    std::swap(gps_, other->gps_);
    std::swap(mag_front_, other->mag_front_);
    std::swap(mag_rear_, other->mag_rear_);
    std::swap(monitor_status_, other->monitor_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Status_descriptor_;
  metadata.reflection = Status_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Command::kSeqFieldNumber;
const int Command::kPpMapFileFieldNumber;
const int Command::kPpGoalLatFieldNumber;
const int Command::kPpGoalLonFieldNumber;
const int Command::kPpGoalAltFieldNumber;
const int Command::kJoyFieldNumber;
const int Command::kCccSpeedFieldNumber;
const int Command::kSelectJoyFieldNumber;
const int Command::kSelectCccFieldNumber;
const int Command::kSelectPpFieldNumber;
const int Command::kMapFieldNumber;
#endif  // !_MSC_VER

Command::Command()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Command::InitAsDefaultInstance() {
  map_ = const_cast< ::ocu::Map*>(&::ocu::Map::default_instance());
}

Command::Command(const Command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Command::SharedCtor() {
  _cached_size_ = 0;
  seq_ = GOOGLE_ULONGLONG(0);
  pp_map_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pp_goal_lat_ = 0;
  pp_goal_lon_ = 0;
  pp_goal_alt_ = 0;
  joy_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ccc_speed_ = 0;
  select_joy_ = false;
  select_ccc_ = false;
  select_pp_ = false;
  map_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Command::~Command() {
  SharedDtor();
}

void Command::SharedDtor() {
  if (pp_map_file_ != &::google::protobuf::internal::kEmptyString) {
    delete pp_map_file_;
  }
  if (joy_ != &::google::protobuf::internal::kEmptyString) {
    delete joy_;
  }
  if (this != default_instance_) {
    delete map_;
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}

const Command& Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ocu_2eproto();
  return *default_instance_;
}

Command* Command::default_instance_ = NULL;

Command* Command::New() const {
  return new Command;
}

void Command::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seq_ = GOOGLE_ULONGLONG(0);
    if (has_pp_map_file()) {
      if (pp_map_file_ != &::google::protobuf::internal::kEmptyString) {
        pp_map_file_->clear();
      }
    }
    pp_goal_lat_ = 0;
    pp_goal_lon_ = 0;
    pp_goal_alt_ = 0;
    if (has_joy()) {
      if (joy_ != &::google::protobuf::internal::kEmptyString) {
        joy_->clear();
      }
    }
    ccc_speed_ = 0;
    select_joy_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    select_ccc_ = false;
    select_pp_ = false;
    if (has_map()) {
      if (map_ != NULL) map_->::ocu::Map::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 seq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pp_map_file;
        break;
      }

      // optional string pp_map_file = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pp_map_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pp_map_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pp_map_file().data(), this->pp_map_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_pp_goal_lat;
        break;
      }

      // optional double pp_goal_lat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pp_goal_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pp_goal_lat_)));
          set_has_pp_goal_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_pp_goal_lon;
        break;
      }

      // optional double pp_goal_lon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pp_goal_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pp_goal_lon_)));
          set_has_pp_goal_lon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_pp_goal_alt;
        break;
      }

      // optional double pp_goal_alt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pp_goal_alt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pp_goal_alt_)));
          set_has_pp_goal_alt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_joy;
        break;
      }

      // optional string joy = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_joy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_joy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->joy().data(), this->joy().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_ccc_speed;
        break;
      }

      // optional double ccc_speed = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ccc_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ccc_speed_)));
          set_has_ccc_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_select_joy;
        break;
      }

      // optional bool select_joy = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_select_joy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &select_joy_)));
          set_has_select_joy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_select_ccc;
        break;
      }

      // optional bool select_ccc = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_select_ccc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &select_ccc_)));
          set_has_select_ccc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_select_pp;
        break;
      }

      // optional bool select_pp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_select_pp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &select_pp_)));
          set_has_select_pp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_map;
        break;
      }

      // optional .ocu.Map map = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 seq = 1;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->seq(), output);
  }

  // optional string pp_map_file = 2;
  if (has_pp_map_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pp_map_file().data(), this->pp_map_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pp_map_file(), output);
  }

  // optional double pp_goal_lat = 3;
  if (has_pp_goal_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->pp_goal_lat(), output);
  }

  // optional double pp_goal_lon = 4;
  if (has_pp_goal_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pp_goal_lon(), output);
  }

  // optional double pp_goal_alt = 5;
  if (has_pp_goal_alt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->pp_goal_alt(), output);
  }

  // optional string joy = 6;
  if (has_joy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->joy().data(), this->joy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->joy(), output);
  }

  // optional double ccc_speed = 7;
  if (has_ccc_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->ccc_speed(), output);
  }

  // optional bool select_joy = 8;
  if (has_select_joy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->select_joy(), output);
  }

  // optional bool select_ccc = 9;
  if (has_select_ccc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->select_ccc(), output);
  }

  // optional bool select_pp = 10;
  if (has_select_pp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->select_pp(), output);
  }

  // optional .ocu.Map map = 21;
  if (has_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->map(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 seq = 1;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->seq(), target);
  }

  // optional string pp_map_file = 2;
  if (has_pp_map_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pp_map_file().data(), this->pp_map_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pp_map_file(), target);
  }

  // optional double pp_goal_lat = 3;
  if (has_pp_goal_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->pp_goal_lat(), target);
  }

  // optional double pp_goal_lon = 4;
  if (has_pp_goal_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pp_goal_lon(), target);
  }

  // optional double pp_goal_alt = 5;
  if (has_pp_goal_alt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->pp_goal_alt(), target);
  }

  // optional string joy = 6;
  if (has_joy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->joy().data(), this->joy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->joy(), target);
  }

  // optional double ccc_speed = 7;
  if (has_ccc_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->ccc_speed(), target);
  }

  // optional bool select_joy = 8;
  if (has_select_joy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->select_joy(), target);
  }

  // optional bool select_ccc = 9;
  if (has_select_ccc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->select_ccc(), target);
  }

  // optional bool select_pp = 10;
  if (has_select_pp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->select_pp(), target);
  }

  // optional .ocu.Map map = 21;
  if (has_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->map(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Command::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 seq = 1;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->seq());
    }

    // optional string pp_map_file = 2;
    if (has_pp_map_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pp_map_file());
    }

    // optional double pp_goal_lat = 3;
    if (has_pp_goal_lat()) {
      total_size += 1 + 8;
    }

    // optional double pp_goal_lon = 4;
    if (has_pp_goal_lon()) {
      total_size += 1 + 8;
    }

    // optional double pp_goal_alt = 5;
    if (has_pp_goal_alt()) {
      total_size += 1 + 8;
    }

    // optional string joy = 6;
    if (has_joy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->joy());
    }

    // optional double ccc_speed = 7;
    if (has_ccc_speed()) {
      total_size += 1 + 8;
    }

    // optional bool select_joy = 8;
    if (has_select_joy()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool select_ccc = 9;
    if (has_select_ccc()) {
      total_size += 1 + 1;
    }

    // optional bool select_pp = 10;
    if (has_select_pp()) {
      total_size += 1 + 1;
    }

    // optional .ocu.Map map = 21;
    if (has_map()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->map());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_pp_map_file()) {
      set_pp_map_file(from.pp_map_file());
    }
    if (from.has_pp_goal_lat()) {
      set_pp_goal_lat(from.pp_goal_lat());
    }
    if (from.has_pp_goal_lon()) {
      set_pp_goal_lon(from.pp_goal_lon());
    }
    if (from.has_pp_goal_alt()) {
      set_pp_goal_alt(from.pp_goal_alt());
    }
    if (from.has_joy()) {
      set_joy(from.joy());
    }
    if (from.has_ccc_speed()) {
      set_ccc_speed(from.ccc_speed());
    }
    if (from.has_select_joy()) {
      set_select_joy(from.select_joy());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_select_ccc()) {
      set_select_ccc(from.select_ccc());
    }
    if (from.has_select_pp()) {
      set_select_pp(from.select_pp());
    }
    if (from.has_map()) {
      mutable_map()->::ocu::Map::MergeFrom(from.map());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_map()) {
    if (!this->map().IsInitialized()) return false;
  }
  return true;
}

void Command::Swap(Command* other) {
  if (other != this) {
    std::swap(seq_, other->seq_);
    std::swap(pp_map_file_, other->pp_map_file_);
    std::swap(pp_goal_lat_, other->pp_goal_lat_);
    std::swap(pp_goal_lon_, other->pp_goal_lon_);
    std::swap(pp_goal_alt_, other->pp_goal_alt_);
    std::swap(joy_, other->joy_);
    std::swap(ccc_speed_, other->ccc_speed_);
    std::swap(select_joy_, other->select_joy_);
    std::swap(select_ccc_, other->select_ccc_);
    std::swap(select_pp_, other->select_pp_);
    std::swap(map_, other->map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Command_descriptor_;
  metadata.reflection = Command_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
const int Point::kZFieldNumber;
#endif  // !_MSC_VER

Point::Point()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Point::InitAsDefaultInstance() {
}

Point::Point(const Point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point::~Point() {
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ocu_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New() const {
  return new Point;
}

void Point::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_y;
        break;
      }

      // required double y = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_z;
        break;
      }

      // required double z = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 17;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->x(), output);
  }

  // required double y = 18;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->y(), output);
  }

  // required double z = 19;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 17;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->x(), target);
  }

  // required double y = 18;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->y(), target);
  }

  // required double z = 19;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Point::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 17;
    if (has_x()) {
      total_size += 2 + 8;
    }

    // required double y = 18;
    if (has_y()) {
      total_size += 2 + 8;
    }

    // required double z = 19;
    if (has_z()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Point::Swap(Point* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map::kPointFieldNumber;
#endif  // !_MSC_VER

Map::Map()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map::InitAsDefaultInstance() {
}

Map::Map(const Map& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map::~Map() {
  SharedDtor();
}

void Map::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_descriptor_;
}

const Map& Map::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ocu_2eproto();
  return *default_instance_;
}

Map* Map::default_instance_ = NULL;

Map* Map::New() const {
  return new Map;
}

void Map::Clear() {
  point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ocu.Point point = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_point;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ocu.Point point = 20;
  for (int i = 0; i < this->point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->point(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ocu.Point point = 20;
  for (int i = 0; i < this->point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->point(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map::ByteSize() const {
  int total_size = 0;

  // repeated .ocu.Point point = 20;
  total_size += 2 * this->point_size();
  for (int i = 0; i < this->point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map::MergeFrom(const Map& from) {
  GOOGLE_CHECK_NE(&from, this);
  point_.MergeFrom(from.point_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map::CopyFrom(const Map& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map::IsInitialized() const {

  for (int i = 0; i < point_size(); i++) {
    if (!this->point(i).IsInitialized()) return false;
  }
  return true;
}

void Map::Swap(Map* other) {
  if (other != this) {
    point_.Swap(&other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_descriptor_;
  metadata.reflection = Map_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ocu

// @@protoc_insertion_point(global_scope)
