t__teleop_base = topics.t__teleop_base 
t__teleop_estop = topics.t__teleop_estop 
t__teleop_over_ride = topics.t__teleop_over_ride 
t__teleop_turret_pan = topics.t__teleop_turret_pan 
t__teleop_turret_tilt = topics.t__teleop_turret_tilt 
t__teleop_moog_pan = topics.t__teleop_moog_pan 
t__teleop_moog_tilt = topics.t__teleop_moog_tilt 
t__teleop_moog_zoom = topics.t__teleop_moog_zoom 
t__teleop_paintball_trigger = topics.t__teleop_paintball_trigger 

t__controller_select = topics.t__controller_select
t__map = topics.t__map 
t__goal = topics.t__goal 
t__controller_status = topics.t__controller_status
t__base_status = topics.t__base_status
t__base = topics.t__base
t__base_actuator_input = topics.t__base_actuator_input
t__ccc_reference_speed =  topics.t__ccc_reference_speed  

t__gps_navsatfix = topics.t__gps_navsatfix 
t__gps_velocity = topics.t__gps_velocity
t__imu_front_imu = topics.t__imu_front_imu 
t__imu_front_magnetometer = topics.t__imu_front_magnetometer 
t__imu_rear_imu = topics.t__imu_rear_imu 
t__imu_rear_magnetometer = topics.t__imu_rear_magnetometer 
t__rse_status = topics.t__rse_status 
t__ccc_status = topics.t__ccc_status 
t__pp_status = topics.t__pp_status 
t__monitor_estop = topics.t__monitor_estop 

ocu_gui : node  {
  DEFS
    array_size = arrays.map_array_size
  SUBSCRIBES
    controller_status { TOPIC t__controller_status MAXLATENCY global.radio_latency }
    base_status { TOPIC t__base_status MAXLATENCY global.radio_latency }
    base { TOPIC t__base MAXLATENCY global.radio_latency }
    actuator_status { TOPIC t__base_actuator_input MAXLATENCY global.radio_latency }
    gps_navsatfix { TOPIC t__gps_navsatfix MAXLATENCY global.radio_latency }
    gps_velocity { TOPIC t__gps_velocity MAXLATENCY global.radio_latency }
    front_imu { TOPIC t__imu_front_imu MAXLATENCY global.radio_latency }
    front_magnetometer { TOPIC t__imu_front_magnetometer MAXLATENCY global.radio_latency }
    rear_imu { TOPIC t__imu_rear_imu MAXLATENCY global.radio_latency }
    rear_magnetometer { TOPIC t__imu_rear_magnetometer MAXLATENCY global.radio_latency }
    rse_status { TOPIC t__rse_status MAXLATENCY global.radio_latency }
    ccc_status { TOPIC t__ccc_status MAXLATENCY global.radio_latency }
    pp_status { TOPIC t__pp_status MAXLATENCY global.radio_latency }
    monitor_estop { TOPIC t__monitor_estop MAXLATENCY global.radio_latency }
  PUBLISHES
    select { TOPIC t__controller_select }
    pp_map { TOPIC t__map }
    pp_goal { TOPIC t__goal }
    ccc_speed { TOPIC t__ccc_reference_speed }
  PERIOD 50msec
  PATH "src/ocu"
  CXX { PATH "src" HEADER "OcuGuiServer.h" CLASS "OcuGui"
    FILENAME "OcuGuiServer.cpp" "ocu.pb.cc" "read_map.cpp" "ocu_server.cpp"
    LIB boost_lib zmq_lib protobuf_lib 
    }
}

ocu_teleop : node {
  DEFS
    XBOX_WIRED: uint8 1
    XBOX_WIRELESS: uint8 2
  DEFS
    device: string "/dev/xbox_wired/js0"
    jstype = XBOX_WIRED
    deadzone: float32 0.20
    heartbeat_timeout: duration 0msec
  PUBLISHES
    base { TOPIC t__teleop_base }
    estop { TOPIC t__teleop_estop }
    over_ride { TOPIC t__teleop_over_ride }
    turret_pan { TOPIC t__teleop_turret_pan }
    turret_tilt { TOPIC t__teleop_turret_tilt }
    moog_pan { TOPIC t__teleop_moog_pan }
    moog_tilt { TOPIC t__teleop_moog_tilt }
    moog_zoom { TOPIC t__teleop_moog_zoom }
    trigger { TOPIC t__teleop_paintball_trigger }
  PERIOD global.joystick_period
  PATH "src/landshark_teleop"
  CXX { PATH "src" HEADER "LandsharkJoystick.h" CLASS "LandsharkJoystick" FILENAME
  "LandsharkJoystick.cpp" LIB boost_lib }
}

############# Libraries #############

boost_lib : cmake_library {
  CMAKE_MODULE "Boost"
  CMAKE_COMPONENTS "thread" "system"
}

zmq_lib : cmake_library {
  PATH "src/ocu/cmake"
  CMAKE_MODULE "ZMQ"
}

protobuf_lib : cmake_library {
  CMAKE_MODULE "Protobuf"
  CMAKE_VAR_LIBRARIES "PROTOBUF_LIBRARIES"
  CMAKE_VAR_INCLUDE_DIRS "PROTOBUF_INCLUDE_DIRS"
}


