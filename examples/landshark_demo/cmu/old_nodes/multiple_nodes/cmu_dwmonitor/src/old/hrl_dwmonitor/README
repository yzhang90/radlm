//========================================================================
//  This software is free: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License Version 3,
//  as published by the Free Software Foundation.
//
//  This software is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public License
//  Version 3 in the file COPYING that came with this distribution.
//  If not, see <http://www.gnu.org/licenses/>.
//========================================================================
/*!
 * \file    dwmonitor
 * \brief   ensures robot safety
 * \author  Fatma Faruq, Jason Larkin (jason.larkin@spiralgen.com)
 * \other   HACMS CMU Advisor Manuela Veloso, SpirgalGen, Inc.
 */
//========================================================================

To run:
$ roslaunch hrl_dwmonitor hrl_dwmonitor.launch 

The input constants (accel_lin_max, vel_lin_max, etc.) are set as parameters 
in the hrl_dwmonitor.launch file. 

To run from terminal, first turn the monitor switch on (1):

$ rostopic pub /hrl/dwmonitor/switch hrl_dwmonitor/dwMonitorSwitch "dwMonitorSwitch: 1"

then publish an obstacle:

$ rostopic pub /hrl/dwmonitor/obstacle hrl_dwmonitor/obstacleMsg "type: 0
coordinates:
  header:
    seq: 0
    stamp:
      secs: 0
      nsecs: 0
    frame_id: ''
  point:
    x: 0.0
    y: 0.0047
    z: 0.0"

The obstacle coordinate I provide as an example is encountered by the bag file:

2013-10-29-17-04-21.bag

at approximately 20 secs into the playback.    


My test script can be run by:

$ rosrun hrl_dwmonitor hrl_dwmonitor_test.py hrl on latlon 0.0 0.004757 0.0

the input format is:

$ rosrun hrl_dwmonitor hrl_dwmonitor_test.py hrl/landshark on/off (monitorSwitch) latlon/gps_meters lat lon altitude

The hrl_dwmonitor_test.py script will:
1) set "dwMonitorSwitch: 1" and publish the obstacle to "x: 0.0, y: 0.0047, z: 0.0"
2) listen to all of the velocity (speed) and gps topics
3) plot 

To run the hrl_dwmonitor node, playback the rosbag, and plot the data as I have, 
follow these steps in this order:

1) $ roslaunch hrl_dwmonitor hrl_dwmonitor.launch     
2) $ rosrun hrl_dwmonitor hrl_dwmonitor_test.py hrl on latlon 0.0 0.004757 0.0
3) $ rosbag play ~/2013-10-29-17-04-21.bag




