
#default_sub = radl.default_sub
#default_pub = radl.default_pub

pp_period: duration 100msec


pubLandsharkGpsImu : node {      
  PATH "cmu_gateway"
  PUBLISHES
    landshark_gps_stub { 
      TOPIC t__gps_navsatfix #}
      }
    landshark_gps_vel_stub { 
      TOPIC t__gps_navsatfix_vel #}
      }
    landshark_imu_stub { 
      TOPIC t__imu_front_imu #}
      }
  PERIOD 100msec
  CXX {
        HEADER   "pubLandsharkGpsImu.h"
        FILENAME "pubLandsharkGpsImu.cpp"
        CLASS "PubLandsharkGpsImu" }
}

pubLandsharkNav : node {      
  PATH "cmu_gateway"
  PUBLISHES
    landshark_nav_initiate { 
      TOPIC t__nav_initiate #}
      }
    landshark_nav_waypoint { 
      TOPIC t__nav_waypoint #}
      }
  PERIOD 100msec
  CXX {
        HEADER   "pubLandsharkNav.h"
        FILENAME "pubLandsharkNav.cpp"
        CLASS "PubLandsharkNav" }
}

monitor : node {
  PATH "cmu_gateway"
  SUBSCRIBES
    landshark_gps_meters_stub { 
      TOPIC t__gps_navsatfix_meters MAXLATENCY 1msec #}
       }
  SUBSCRIBES
    landshark_gps_vel_stub { 
      TOPIC t__gps_navsatfix_vel MAXLATENCY 1msec #}
       }
#  SUBSCRIBES
#    landshark_odom_stub { 
#      TOPIC t__odom
  PUBLISHES
    trigger_alarm { 
      TOPIC alarm #}
      }
  PERIOD 100msec
  CXX { 
    HEADER   "monitor.h"
    FILENAME "monitor.cpp" "dwmonitor2.c"
    CLASS "Monitor" 
#    LIB dwmonitorlib
        }
}

monitor_stats : node {
  PATH "cmu_gateway"
#  SUBSCRIBES
#    sensor1 { 
#      TOPIC t__sensor1
#  SUBSCRIBES
#    sensor2 { 
#      TOPIC t__sensor2
#      MAXLATENCY 1msec}   
#  PUBLISHES
#    trigger_alarm { 
#      TOPIC alarm
#      PUBLISHER default_pub}
  PERIOD 100msec
  CXX { 
    HEADER   "monitor_stats.h"
    FILENAME "monitor_stats.cpp" "ztest.c" "ftest.c"
#    "sensor_fusion.c"
    CLASS "MonitorStats" 
        }
}

alarm : topic {
    FIELDS
        status : bool false
#        description: string
}

#landshark_pp_cmu : node {
#  PUBLISHES 
#    pp_status { TOPIC topics.t__pp_status }
#    pp_base { TOPIC topics.t__pp_base }
#  SUBSCRIBES
#    pp_request { TOPIC topics.t__fsm_pp_request MAXLATENCY 10msec }
#  SUBSCRIBES
#    landshark_base_velocity { TOPIC topics.t__teleop_base MAXLATENCY 10msec }
#  PERIOD pp_period
#  PATH ""
#  CXX { PATH "" HEADER "pp_cmu.h" CLASS "PP" FILENAME "pp_cmu.cpp" }
#}



#--------------------------------------------------------------------
#gateway
#--------------------------------------------------------------------

controller_gateway : node {
  PATH "cmu_gateway"
  PERIOD 100msec
#  PUBLISHES base_velocity {
#    TOPIC ros_base_velocity
#  }
  PUBLISHES landshark_gps_meters_stub {
    TOPIC t__gps_navsatfix_meters
  }
  PUBLISHES landshark_base_velocity {
    TOPIC topics.t__teleop_base
  }
  SUBSCRIBES landshark_gps_stub {
    TOPIC t__gps_navsatfix
    MAXLATENCY 10msec
  }
  SUBSCRIBES landshark_gps_vel_stub { 
      TOPIC t__gps_navsatfix_vel
      MAXLATENCY 1msec
  }
  SUBSCRIBES landshark_imu_stub {
    TOPIC t__imu_front_imu
    MAXLATENCY 10msec
  }
  CXX { HEADER "gateway.h" CLASS "Gateway" }
}

nav_gateway : node {
  PATH "cmu_gateway"
  SUBSCRIBES landshark_nav_initiate { 
      TOPIC t__nav_initiate
      MAXLATENCY 1msec
  }
  SUBSCRIBES landshark_nav_waypoint { 
      TOPIC t__nav_waypoint
      MAXLATENCY 1msec
  }
  PERIOD 100msec
  CXX { HEADER "gateway_nav.h" CLASS "Gateway" }
}

# gps topics
t__gps_navsatfix : topic { FIELDS
  stamp = radl.start_time
  latitude: float64 0
  longitude: float64 0
  altitude: float64 0
  position_covariance = arrays.zeros_9_float64
  position_covariance_type: uint8 0
  status: struct { FIELDS 
  status: int8 0
  service: uint16 0 
  }
}

t__nav_initiate : topic {
    FIELDS
        status : bool false
#        description: string
}

t__nav_waypoint : topic {
  FIELDS
    x: float64 0
    y: float64 0
}

#nav_status : topic {
#    FIELDS
#        status : bool false
##        description: string
#}

# gps topics
t__gps_navsatfix_meters : topic { FIELDS
  stamp = radl.start_time
  x: float64 0
  y: float64 0
  }

# gps topics
t__gps_navsatfix_vel : topic { FIELDS
  stamp = radl.start_time
  x: float64 0
  y: float64 0
  }

# imu topics
t__imu_front_imu : topic { FIELDS
  stamp = radl.start_time
  orientation: struct { FIELDS x: float64 0  y: float64 0 z: float64 0 w: float64 0 }
  orientation_covariance = arrays.zeros_9_float64 
  angular_velocity: struct { FIELDS x: float64 0  y: float64 0 z: float64 0 }
  angular_velocity_covariance = arrays.zeros_9_float64
  linear_acceleration: struct { FIELDS x: float64 0  y: float64 0 z: float64 0 }
  linear_acceleration_covariance = arrays.zeros_9_float64
}

# Some generic definitions for conciseness
# m__ prefix indicates a message definition 
# These are as similar to their ROS counterpart messages
#
m__vector3 : struct { FIELDS x: float64 0  y: float64 0 z: float64 0 }

############# Topics #############
#
# By convention, we have topics beginning with t__

# teleop topics
#t__teleop_base : topic { FIELDS linear = m__vector3 angular = m__vector3 }

# odom topics
#t__odom : topic { FIELDS
#  stamp = radl.start_time
#  orientation: struct { FIELDS x: float64 0  y: float64 0 z: float64 0 w: float64 0 }
#  orientation_covariance = arrays.zeros_9_float64 
#  angular_velocity: struct { FIELDS x: float64 0  y: float64 0 z: float64 0 }
#  angular_velocity_covariance = arrays.zeros_9_float64
#  linear_acceleration: struct { FIELDS x: float64 0  y: float64 0 z: float64 0 }
#  linear_acceleration_covariance = arrays.zeros_9_float64
#}

#dwmonitorlib : static_library {
#  PATH "dwmonitorlib"
#  HEADER_PATHS ""
#  CXX { PATH "" FILENAME
#    "dwmonitor2.c"
#  }
#}

