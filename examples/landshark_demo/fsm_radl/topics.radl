# Some generic definitions for conciseness
# m__ prefix indicates a message definition 
# These are as similar to their ROS counterpart messages
#
m__vector3 : struct { FIELDS x: float64 0  y: float64 0 z: float64 0 }

############# Topics #############
#
# By convention, we have topics beginning with t__

# teleop topics
t__base : topic { FIELDS
  stamp = radl.start_time
  linear = m__vector3 
  angular = m__vector3 
}
t__teleop_base = t__base
t__teleop_over_ride : topic { FIELDS data : bool false }
t__teleop_estop : topic { FIELDS data : uint8 0 }
t__teleop_deadman : topic { FIELDS data : bool false }
t__teleop_turret_pan : topic { FIELDS data : float64 0 }
t__teleop_turret_tilt : topic { FIELDS data : float64 0 }
t__teleop_moog_pan : topic { FIELDS data : float64 0 }
t__teleop_moog_tilt : topic { FIELDS data : float64 0 }
t__teleop_moog_zoom : topic { FIELDS data : float64 0 }
t__teleop_paintball_trigger : topic { FIELDS data : uint8 0 }

# base topics
t__base_wheel_encoder : topic { FIELDS
  stamp = radl.start_time
  left: int64 0
  right: int64 0
}
t__base_battery_status : topic { FIELDS data : float32 0 }
t__base_status : topic { FIELDS data : uint8 0 }
t__base_actuator_input : topic { FIELDS
  stamp = radl.start_time
  left : float64 0
  right : float64 0
}

# fsm topics
t__fsm_ccc_request : topic { FIELDS data : uint8 0 }
t__fsm_pp_request : topic { FIELDS data : uint8 0 }

t__estop : topic { FIELDS data : uint8 0 }
t__controller_select : topic { FIELDS data : uint8 0 }

# ccc topics
t__ccc_status : topic { FIELDS data : uint8 0 }
t__ccc_base = t__base

# pp topics
t__pp_status : topic { FIELDS data : uint8 0 }
t__pp_base = t__base 

# monitor topics
t__monitor_estop : topic { FIELDS data : uint8 0 }

# gps topics
t__gps_navsatfix : topic { FIELDS
  stamp = radl.start_time
  latitude: float64 0
  longitude: float64 0
  altitude: float64 0
  position_covariance = arrays.zeros_9_float64
  position_covariance_type: uint8 0
  status: struct { FIELDS 
    status: int8 0
    service: uint16 0 
  }
}

t__gps_velocity : topic { FIELDS 
  stamp = radl.start_time
  linear: struct { FIELDS x: float64 0  y: float64 0 z: float64 0 }
  angular: struct { FIELDS x: float64 0  y: float64 0 z: float64 0 }
}
t__gps_timeref : topic { FIELDS
  stamp = radl.start_time
  time_ref : time 0sec
}

# imu topics
t__imu_front_imu : topic { FIELDS
  stamp = radl.start_time
  orientation: struct { FIELDS x: float64 0  y: float64 0 z: float64 0 w: float64 0 }
  orientation_covariance = arrays.zeros_9_float64 
  angular_velocity: struct { FIELDS x: float64 0  y: float64 0 z: float64 0 }
  angular_velocity_covariance = arrays.zeros_9_float64
  linear_acceleration: struct { FIELDS x: float64 0  y: float64 0 z: float64 0 }
  linear_acceleration_covariance = arrays.zeros_9_float64
}

t__imu_front_magnetometer : topic { FIELDS
  stamp = radl.start_time
  vector: struct { FIELDS x: float64 0  y: float64 0 z: float64 0 }
}

t__imu_rear_imu = t__imu_front_imu
t__imu_rear_magnetometer = t__imu_front_magnetometer


# turret 
t__turret_status_pan : topic { FIELDS data : float64 0 }
t__turret_status_tilt : topic { FIELDS data : float64 0 }

# moog 
t__moog_status_pan : topic { FIELDS data : float64 0 }
t__moog_status_tilt : topic { FIELDS data : float64 0 }
t__moog_status_zoom : topic { FIELDS data : float64 0 }


# laser 

t__laser_scan_front : topic { FIELDS 
  stamp = radl.start_time
  angle_min: float32 0
  angle_max: float32 0
  angle_increment: float32 0
  time_increment: float32 0
  scan_time: float32 0
  range_min: float32 0
  range_max: float32 0
  ranges = arrays.hokuyo_range_array
  intensities = arrays.hokuyo_range_array
}

t__laser_scan_rear = t__laser_scan_front



# This is an array of 16 points
t__map : topic { FIELDS 
  data: bool false
  points = arrays.map_points
}

# This is the goal for the object in GPS coordinates
t__goal : topic { FIELDS 
  latitude: float32 0
  longitude: float32 0
  altitude: float32 0
}

#
t__pp : topic { FIELDS 
  data: uint8 0
}

